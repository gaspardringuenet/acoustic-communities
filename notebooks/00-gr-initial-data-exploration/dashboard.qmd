---
title: "Survey dashboard"
author: Gaspard Ringuenet

execute:
  freeze: auto

format:
  dashboard:
    nav-buttons:
      - icon: house
        href: "../../../website/_site/index.html"

jupyter: acoustic-communities-local
---

# ABRAÇOS I

```{python}
#| include: false

# Imports
import os

import matplotlib.pyplot as plt
import numpy as np
from PIL import Image

# Local imports
from src.exploration.io import load_survey_ds, print_file_infos
from src.exploration.visualization import plot_survey_map, plot_sv_channels_faceted, plot_3d_scatter, plot_hexbin_2d, plot_hist, plot_sv_dist_combined, plot_3d_scatter_interactive
from src.exploration.processing import ds_to_sv, filter_depth, get_ch_list, compute_differences, flatten_valid, sample_safe
```

```{python}
#| tags: [parameters]
#| include: false

# Hyperparameters
# Acoustics
SV_THRESHOLD = -120             # threshold for min Sv (accross channels), in dB. ESUs with one channel below threshold are removed from analyses
REF_FREQ = 38.                  # reference channel to subtract when computing ΔSv

# Plots
N_SAMPLES = 100_000             # number of samples for ΔSv distribution plots
FIGSIZE = (6, 5)                # figure size for the ΔSv distribution plots
FORCE_PLOT = False              # whether to plot even if the image file already exists in notebooks/output/
```

```{python}
#| include: false

# Survey
EI = "abracos1_3pings1m"        # which echointegration file to use as input (see src.exploration.data_config.py)
SURVEY = "ABRAÇOS I"            # the corresponding survey
```

```{python}
#| include: false
# Load survey and print basic information
ds = load_survey_ds(EI)

# Get valid Sv values as xarray.DataArray
sv = ds_to_sv(ds, sv_threshold=SV_THRESHOLD)
valid = ~np.isnan(sv)
valid_any = valid.any(dim=[d for d in sv.dims if d not in ("depth", "channel")])
valid_depths = sv["depth"].where(valid_any)
max_valid_depth = valid_depths.max(dim="depth", skipna=True)
```

## Row {height="50%"}

```{python}
#| title: Echogram

img_file = f"output/figures/{EI}_4Cfacet.png"
if not os.path.isfile(img_file) or FORCE_PLOT:
    plot_sv_channels_faceted(
        ds["Sv"],
        outfile=img_file,
        cmap="inferno",
        figsize=(20, 12),
        vmin=-100,
        vmax=-50,
        sample_pixels=10_000_000
    )
img = Image.open(img_file)
img
```

## Row {height="30%"}

### Column

```{python}
#| title: Survey map

# Plot map of the survey
img_file = f"output/figures/{EI}_survey_map.png"
if not os.path.isfile(img_file) or FORCE_PLOT:
    plot_survey_map(ds, outfile=img_file)
img = Image.open(img_file)
img
```

### Column {.tabset}

```{python}
#| title: 3D scatter
# 3D scatterplot
from IPython.display import display, Markdown

max_freq = 200.
max_depth = float(max_valid_depth.sel(channel=max_freq))

img_file = f"output/figures/{EI}_SvDiffDist_3D0-{max_depth}m_thresh{SV_THRESHOLD}_N{N_SAMPLES}.png"

if not os.path.isfile(img_file ) or FORCE_PLOT:

    sv = filter_depth(sv, max_depth)
    ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
    sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
    flats = flatten_valid(*sv_diffs.values())
    samples = sample_safe(*flats, n_samples=N_SAMPLES)

    plot_3d_scatter(samples[0], samples[1], samples[2],
                    outfile=img_file ,
                    figsize=FIGSIZE)

img = Image.open(img_file)
display(img)
display(Markdown(f"*Figure: 3D scatterplot of {N_SAMPLES} ESUs sampled between 0 and {max_depth} meters.*"))
```

```{python}
#| title: 3D scatter (interactive)
# 3D scatterplot in the ~ 0 - 200 m depth range
max_freq = 200.
max_depth = float(max_valid_depth.sel(channel=max_freq))

sv = filter_depth(sv, max_depth)
ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
flats = flatten_valid(*sv_diffs.values())
samples = sample_safe(*flats, n_samples=N_SAMPLES)

plot_3d_scatter_interactive(samples[0], samples[1], samples[2])
```

```{python}
#| title: 2D hexbin
# 2D hexbin plot in the ~ 0 - 300 m depth range
max_freq = 120.
max_depth = float(max_valid_depth.sel(channel=max_freq))

img_file = f"output/figures/{EI}_SvDiffDist_2D0-{max_depth}m_thresh{SV_THRESHOLD}_N{N_SAMPLES}.png"

if not os.path.isfile(img_file ) or FORCE_PLOT:

    sv = filter_depth(sv, max_depth)
    ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
    sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
    flats = flatten_valid(*sv_diffs.values())
    samples = sample_safe(*flats, n_samples=N_SAMPLES)

    plot_hexbin_2d(samples[0], samples[1],
                    outfile=img_file ,
                    figsize=FIGSIZE)

img = Image.open(img_file)
display(img)
display(Markdown(f"*Figure: 2D hexbin plot of {N_SAMPLES} ESUs sampled between 0 and {max_depth} meters.*"))
```

```{python}
#| title: 1D hist
# 1D histogram in the ~ 0 - 500 m range
max_freq = 70.
max_depth = float(max_valid_depth.sel(channel=max_freq))

img_file = f"output/figures/{EI}_SvDiffDist_1D0-{max_depth}m_thresh{SV_THRESHOLD}_N{N_SAMPLES}.png"

if not os.path.isfile(img_file ) or FORCE_PLOT:

    sv = filter_depth(sv, max_depth)
    ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
    sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
    flats = flatten_valid(*sv_diffs.values())
    samples = sample_safe(*flats, n_samples=N_SAMPLES)

    plot_hist(samples[0],
              outfile=img_file,
              figsize=FIGSIZE)

img = Image.open(img_file)
display(img)
display(Markdown(f"*Figure: 1D histogram of {N_SAMPLES} ESUs sampled between 0 and {max_depth} meters.*"))
```

# ABRAÇOS II    

```{python}
#| include: false

# Survey
EI = "abracos2_3pings1m"        # which echointegration file to use as input (see src.exploration.data_config.py)
SURVEY = "ABRAÇOS II"            # the corresponding survey
```

```{python}
#| include: false
# Load survey and print basic information
ds = load_survey_ds(EI)

# Get valid Sv values as xarray.DataArray
sv = ds_to_sv(ds, sv_threshold=SV_THRESHOLD)
valid = ~np.isnan(sv)
valid_any = valid.any(dim=[d for d in sv.dims if d not in ("depth", "channel")])
valid_depths = sv["depth"].where(valid_any)
max_valid_depth = valid_depths.max(dim="depth", skipna=True)
```

## Row {height="50%"}

```{python}
#| title: Echogram

img_file = f"output/figures/{EI}_4Cfacet.png"
if not os.path.isfile(img_file) or FORCE_PLOT:
    plot_sv_channels_faceted(
        ds["Sv"],
        outfile=img_file,
        cmap="inferno",
        figsize=(20, 12),
        vmin=-100,
        vmax=-50,
        sample_pixels=10_000_000
    )
img = Image.open(img_file)
img
```

## Row {height="30%"}

### Column

```{python}
#| title: Survey map

# Plot map of the survey
img_file = f"output/figures/{EI}_survey_map.png"
if not os.path.isfile(img_file) or FORCE_PLOT:
    plot_survey_map(ds, outfile=img_file)
img = Image.open(img_file)
img
```

### Column {.tabset}

```{python}
#| title: 3D scatter
# 3D scatterplot
from IPython.display import display, Markdown

max_freq = 200.
max_depth = float(max_valid_depth.sel(channel=max_freq))

img_file = f"output/figures/{EI}_SvDiffDist_3D0-{max_depth}m_thresh{SV_THRESHOLD}_N{N_SAMPLES}.png"

if not os.path.isfile(img_file ) or FORCE_PLOT:

    sv = filter_depth(sv, max_depth)
    ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
    sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
    flats = flatten_valid(*sv_diffs.values())
    samples = sample_safe(*flats, n_samples=N_SAMPLES)

    plot_3d_scatter(samples[0], samples[1], samples[2],
                    outfile=img_file ,
                    figsize=FIGSIZE)

img = Image.open(img_file)
display(img)
display(Markdown(f"*Figure: 3D scatterplot of {N_SAMPLES} ESUs sampled between 0 and {max_depth} meters.*"))
```

```{python}
#| title: 3D scatter (interactive)
# 3D scatterplot in the ~ 0 - 200 m depth range
max_freq = 200.
max_depth = float(max_valid_depth.sel(channel=max_freq))

sv = filter_depth(sv, max_depth)
ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
flats = flatten_valid(*sv_diffs.values())
samples = sample_safe(*flats, n_samples=N_SAMPLES)

plot_3d_scatter_interactive(samples[0], samples[1], samples[2])
```

```{python}
#| title: 2D hexbin
# 2D hexbin plot in the ~ 0 - 300 m depth range
max_freq = 120.
max_depth = float(max_valid_depth.sel(channel=max_freq))

img_file = f"output/figures/{EI}_SvDiffDist_2D0-{max_depth}m_thresh{SV_THRESHOLD}_N{N_SAMPLES}.png"

if not os.path.isfile(img_file ) or FORCE_PLOT:

    sv = filter_depth(sv, max_depth)
    ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
    sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
    flats = flatten_valid(*sv_diffs.values())
    samples = sample_safe(*flats, n_samples=N_SAMPLES)

    plot_hexbin_2d(samples[0], samples[1],
                    outfile=img_file ,
                    figsize=FIGSIZE)

img = Image.open(img_file)
display(img)
display(Markdown(f"*Figure: 2D hexbin plot of {N_SAMPLES} ESUs sampled between 0 and {max_depth} meters.*"))
```

```{python}
#| title: 1D hist
# 1D histogram in the ~ 0 - 500 m range
max_freq = 70.
max_depth = float(max_valid_depth.sel(channel=max_freq))

img_file = f"output/figures/{EI}_SvDiffDist_1D0-{max_depth}m_thresh{SV_THRESHOLD}_N{N_SAMPLES}.png"

if not os.path.isfile(img_file ) or FORCE_PLOT:

    sv = filter_depth(sv, max_depth)
    ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
    sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
    flats = flatten_valid(*sv_diffs.values())
    samples = sample_safe(*flats, n_samples=N_SAMPLES)

    plot_hist(samples[0],
              outfile=img_file,
              figsize=FIGSIZE)

img = Image.open(img_file)
display(img)
display(Markdown(f"*Figure: 1D histogram of {N_SAMPLES} ESUs sampled between 0 and {max_depth} meters.*"))
```

# AMAZOMIX

```{python}
#| include: false

# Survey
EI = "amazomix_3pings1m"        # which echointegration file to use as input (see src.exploration.data_config.py)
SURVEY = "AMAZOMIX"            # the corresponding survey
```

```{python}
#| include: false
# Load survey and print basic information
ds = load_survey_ds(EI)

# Get valid Sv values as xarray.DataArray
sv = ds_to_sv(ds, sv_threshold=SV_THRESHOLD)
valid = ~np.isnan(sv)
valid_any = valid.any(dim=[d for d in sv.dims if d not in ("depth", "channel")])
valid_depths = sv["depth"].where(valid_any)
max_valid_depth = valid_depths.max(dim="depth", skipna=True)
```

## Row {height="50%"}

```{python}
#| title: Echogram

img_file = f"output/figures/{EI}_4Cfacet.png"
if not os.path.isfile(img_file) or FORCE_PLOT:
    plot_sv_channels_faceted(
        ds["Sv"],
        outfile=img_file,
        cmap="inferno",
        figsize=(20, 12),
        vmin=-100,
        vmax=-50,
        sample_pixels=10_000_000
    )
img = Image.open(img_file)
img
```

## Row {height="30%"}

### Column

```{python}
#| title: Survey map

# Plot map of the survey
img_file = f"output/figures/{EI}_survey_map.png"
if not os.path.isfile(img_file) or FORCE_PLOT:
    plot_survey_map(ds, outfile=img_file)
img = Image.open(img_file)
img
```

### Column {.tabset}

```{python}
#| title: 3D scatter
# 3D scatterplot
from IPython.display import display, Markdown

max_freq = 200.
max_depth = float(max_valid_depth.sel(channel=max_freq))

img_file = f"output/figures/{EI}_SvDiffDist_3D0-{max_depth}m_thresh{SV_THRESHOLD}_N{N_SAMPLES}.png"

if not os.path.isfile(img_file ) or FORCE_PLOT:

    sv = filter_depth(sv, max_depth)
    ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
    sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
    flats = flatten_valid(*sv_diffs.values())
    samples = sample_safe(*flats, n_samples=N_SAMPLES)

    plot_3d_scatter(samples[0], samples[1], samples[2],
                    outfile=img_file ,
                    figsize=FIGSIZE)

img = Image.open(img_file)
display(img)
display(Markdown(f"*Figure: 3D scatterplot of {N_SAMPLES} ESUs sampled between 0 and {max_depth} meters.*"))
```

```{python}
#| title: 3D scatter (interactive)
# 3D scatterplot in the ~ 0 - 200 m depth range
max_freq = 200.
max_depth = float(max_valid_depth.sel(channel=max_freq))

sv = filter_depth(sv, max_depth)
ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
flats = flatten_valid(*sv_diffs.values())
samples = sample_safe(*flats, n_samples=N_SAMPLES)

plot_3d_scatter_interactive(samples[0], samples[1], samples[2])
```

```{python}
#| title: 2D hexbin
# 2D hexbin plot in the ~ 0 - 300 m depth range
max_freq = 120.
max_depth = float(max_valid_depth.sel(channel=max_freq))

img_file = f"output/figures/{EI}_SvDiffDist_2D0-{max_depth}m_thresh{SV_THRESHOLD}_N{N_SAMPLES}.png"

if not os.path.isfile(img_file ) or FORCE_PLOT:

    sv = filter_depth(sv, max_depth)
    ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
    sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
    flats = flatten_valid(*sv_diffs.values())
    samples = sample_safe(*flats, n_samples=N_SAMPLES)

    plot_hexbin_2d(samples[0], samples[1],
                    outfile=img_file ,
                    figsize=FIGSIZE)

img = Image.open(img_file)
display(img)
display(Markdown(f"*Figure: 2D hexbin plot of {N_SAMPLES} ESUs sampled between 0 and {max_depth} meters.*"))
```

```{python}
#| title: 1D hist
# 1D histogram in the ~ 0 - 500 m range
max_freq = 70.
max_depth = float(max_valid_depth.sel(channel=max_freq))

img_file = f"output/figures/{EI}_SvDiffDist_1D0-{max_depth}m_thresh{SV_THRESHOLD}_N{N_SAMPLES}.png"

if not os.path.isfile(img_file ) or FORCE_PLOT:

    sv = filter_depth(sv, max_depth)
    ch_list = get_ch_list(sv, max_freq, ch_ref=REF_FREQ)
    sv_diffs = compute_differences(sv, ch_ref=REF_FREQ, ch_list=ch_list)
    flats = flatten_valid(*sv_diffs.values())
    samples = sample_safe(*flats, n_samples=N_SAMPLES)

    plot_hist(samples[0],
              outfile=img_file,
              figsize=FIGSIZE)

img = Image.open(img_file)
display(img)
display(Markdown(f"*Figure: 1D histogram of {N_SAMPLES} ESUs sampled between 0 and {max_depth} meters.*"))
```


